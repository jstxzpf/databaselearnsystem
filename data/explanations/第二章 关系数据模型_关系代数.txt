# 关系代数

## 定义
关系代数是一种用于查询和操作关系数据库的数学理论。它由一组运算符（如选择、投影、连接等）组成，通过这些运算符可以对关系进行各种变换。关系代数是SQL语言的基础。

### 重要性及应用场景
关系代数的重要性在于它提供了一种精确的语言来描述如何从一个或多个表中获取所需的信息，并且这种语言具有很强的理论基础和严谨性。在实际应用中，了解关系代数可以帮助数据库设计人员更好地理解查询优化器的工作原理，从而设计出高效的查询语句。

## 关系运算
### 选择（Select）
**选择操作符**用于从一个表中筛选出满足特定条件的元组（行）。
```mermaid
graph TD
    A[原始关系] --> B{过滤}
    B -->|True| C[结果]
```

例如，假设有一个`Students`关系包含了学生姓名和年龄的信息。如果要找出所有20岁以上的学生的列表：
- 关系代数表达式：$ \sigma_{age > 20}(Students) $

### 投影（Project）
**投影操作符**用于从一个表中选择特定的列，并删除重复行。
```mermaid
graph TD
    A[原始关系] --> B{提取}
    B --> C[结果]
```

例如，假设有一个`Courses`关系包含了课程编号、名称和学分的信息。如果要列出所有不同的课程名：
- 关系代数表达式：$ \pi_{name}(Courses) $

### 连接（Join）
**连接操作符**用于从两个表中提取满足特定条件的行对，并组合这些行。
```mermaid
graph TD
    A[关系1] -->|JOIN| B{匹配}
    B --> C[结果]
```

例如，假设有一个`Students`和一个`Grades`的关系。如果要找出每个学生的姓名及其成绩：
- 关系代数表达式：$ Students \bowtie_{id = studentID} Grades $

### 并集（Union）
**并集操作符**用于合并两个具有相同结构的表。
```mermaid
graph TD
    A[关系1] --> B{合并}
    C[关系2] --> B
    B --> D[结果]
```

例如，假设有一个`CourseA`和一个`CourseB`的关系。如果要创建一个包含这两个课程的所有学生列表：
- 关系代数表达式：$ CourseA \cup CourseB $

### 交集（Intersection）
**交集操作符**用于找出两个关系共有的部分。
```mermaid
graph TD
    A[关系1] --> B{公共元素}
    C[关系2] --> B
    B --> D[结果]
```

例如，假设有一个`CourseA`和一个`CourseB`的关系。如果要创建一个包含这两个课程共同学生名单的列表：
- 关系代数表达式：$ CourseA \cap CourseB $

### 差集（Difference）
**差集操作符**用于找出只在一个关系中存在而不在另一个关系中存在的元素。
```mermaid
graph TD
    A[关系1] --> B{差异}
    C[关系2] --> B
    B --> D[结果]
```

例如，假设有一个`CourseA`和一个`CourseB`的关系。如果要创建一个只在`CourseA`中而不在`CourseB`中的学生名单：
- 关系代数表达式：$ CourseA - CourseB $

## 示例
考虑以下两个关系：

- `Courses`: {课程编号（courseID）, 课程名称（name），学分（credit）}
- `Enrollments`: {学生编号（studentID）, 课程编号（courseID）}

使用这些关系，我们可以利用关系代数来回答问题。例如，“列出所有选修了CS101的学生”，可以通过以下步骤完成：
1. 使用选择操作找出所有的CS101的课程记录。
2. 使用连接操作将Enrollments与这些CS101记录匹配。

这种组合的方式可以确保我们只考虑那些确实参与CS101学习的学生，而不会包括任何没有选修该课程的人。