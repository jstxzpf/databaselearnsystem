# 数据定义语言 (Data Definition Language, DDL)

## 定义

**数据定义语言（DDL）** 是SQL（Structured Query Language，结构化查询语言）中的一种子集，它用于创建、修改和删除数据库中的对象（如表、视图等）。DDL的主要职责是定义数据库的逻辑结构，而不涉及具体的数据操作。与之相对的是数据操纵语言（DML），后者关注于对已经存在的数据进行增删改查。

## 重要性和应用场景

### 重要性
- **建模**：创建符合业务需求的关系模型。
- **维护**：修改数据库对象的定义，以适应变化的需求或环境。
- **安全性**：通过DDL可以控制谁有权访问哪些数据库对象以及如何访问这些对象。
- **灵活性**：轻松地添加新表、视图或删除不再需要的对象。

### 应用场景
1. **创建数据库结构**：当一个新的项目开始，需要根据业务需求定义相应的数据模型（即各个实体及其属性和关系）。
2. **修改现有模式**：随着项目的进展，可能需要调整原有数据模型以增加新的功能或修复错误。
3. **安全性设置**：管理不同用户对数据库的不同级别的访问权限。

## 具体示例

### 创建表
```sql
CREATE TABLE students (
    id INT PRIMARY KEY,
    name VARCHAR(100),
    age INT,
    grade INT CHECK (grade BETWEEN 1 AND 12)
);
```

此语句创建了一个名为`students`的表格，包含四个字段：`id`（学生ID），`name`（姓名），`age`（年龄）和`grade`（年级）。这里还定义了`PRIMARY KEY`约束来保证每个学生的唯一性以及`CHECK`约束确保所有年级都在1到12之间。

### 修改表
```sql
ALTER TABLE students ADD COLUMN email VARCHAR(50);
```
这表示在`students`表中增加一个新字段`email`，用于存储学生电子邮件地址的信息。

### 删除表
```sql
DROP TABLE students;
```

此命令会彻底删除指定的`students`表及其所有数据（不可恢复）。

## Mermaid图表

以下是一个简化的Mermaid图，描述了DDL的基本流程：

```mermaid
graph TD
    A[启动数据库管理系统] --> B{执行DDL语句}
    B -->|创建新对象| C(Create)
    B -->|修改现有对象| D(Alter)
    B -->|删除对象| E(Drop)
```

这个图表展示了在不同的场景下，使用DDL可以实现的功能及其流程。