# 关系的集合运算（并、交、差）

## 定义和原理

在关系型数据库中，“集合运算”是用来操作两个或多个表之间的数据的一种方法。主要的三种运算包括“并”、“交”和“差”。

### 并 (Union)

并运算将两个关系中的所有元组合并成一个新的关系，要求两个关系具有相同的属性集，并且对应位置上的属性必须是相容的（即类型一致）。简单来说，就是把两张表格里的数据全部合并在一起。

**示例：**
假设你有两个班级的学生名单：
- 班级A有学生：张三、李四、王五
- 班级B有学生：赵六、孙七、周八

使用并运算可以得到一个集合，包括所有这些学生的姓名（当然重复的名字只会出现一次）。

### 交 (Intersection)

交运算找出两个关系共有的元组形成的新关系。这表示只保留那些同时出现在两个表中的数据行。

**示例：**
继续上面的例子，如果班级A和B都有“李四”，那么用交运算可以得到一个集合，里面只有名字叫“李四”的学生（如果有多个相同的姓名也会只出现一次）。

### 差 (Difference)

差运算找出属于第一个关系但不属于第二个关系的元组形成的新关系。这表示从第一张表中去掉第二张表里有的那些行的数据后剩下的内容。

**示例：**
如果班级A中有学生“张三、李四、王五”，而班级B有“赵六、孙七、周八和李四”。用差运算可以得到一个集合，里面只有“张三”、“王五”。

## 在数据库系统中的作用

- **合并数据**：并运算是将多个来源的数据整合到一起的一种有效方法。
- **筛选信息**：交和差操作用于查找两个或更多关系之间的共同点或者差异，是非常有用的查询手段。

## 实际应用场景与示例

### 情景案例
假设某大学有两个系：计算机科学系（CS）和数学系（Math），每个系都有自己的学生名单。想要知道哪些学生同时在两系的课程表中出现以及只在一个系注册的学生有哪些。

- **并**操作可以用来获取所有注册学生的完整列表。
- **交**操作可以帮助找出同时属于两个部门的学生。
- **差**操作则能识别出仅有一个特定系的学生。

### SQL实现
这里用SQL语句来展示如何在数据库中应用这些集合运算：

```sql
-- 假设我们有两个表：
CREATE TABLE CS_Students (name VARCHAR(25));
INSERT INTO CS_Students VALUES ('Alice'), ('Bob'), ('Charlie');
CREATE TABLE Math_Students (name VARCHAR(25));
INSERT INTO Math_Students VALUES ('Bob'), ('David');

-- 并操作
SELECT name FROM CS_Students UNION SELECT name FROM Math_Students;

-- 交操作
SELECT name FROM CS_Students WHERE name IN (SELECT name FROM Math_Students);

-- 差操作（仅限于CS系）
SELECT name FROM CS_Students EXCEPT SELECT name FROM Math_Students;
```

## 使用Mermaid图表描述流程

```mermaid
graph TD
    A[定义关系] --> B[执行并]
    B --> C[执行交]
    C --> D[执行差]
    D --> E[获取结果集]
```
这张图简单地描绘了如何通过依次进行不同的集合运算来从原始的关系中导出新的信息。