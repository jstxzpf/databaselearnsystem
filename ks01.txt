数据库系统考试题型
考试时长: 120分钟
考试范围: 第七章 约束与触发器


1. 单项选择题 (30分)
### 数据库系统考试单项选择题（第七章 约束与触发器）

1. 在关系数据库中，哪一种约束用于保证表中的主键字段不允许有重复值？
   A) NOT NULL 约束
   B) UNIQUE 约束
   C) CHECK 约束
   D) PRIMARY KEY 约束
D
2. 下列哪种类型的触发器可以用来自动更新另一个表的数据？
   A) AFTER INSERT 触发器
   B) BEFORE DELETE 触连器
   C) INSTEAD OF UPDATE 触发器
   D) AFTER UPDATE 触发器
D
3. 在SQL中，要创建一个只能在INSERT操作后触发的触发器，应当使用哪个关键字？
   A) BEFORE INSERT
   B) AFTER INSERT
   C) INSTEAD OF INSERT
   D) TRIGGER AFTER INSERT
B
4. 下面哪种约束能够确保员工表中的入职日期字段值必须在过去的时间内（即当前时间之前的某天）？
   A) NOT NULL 约束
   B) DEFAULT 约束
   C) CHECK (HireDate < CURRENT_DATE)
   D) FOREIGN KEY 约束
C
5. 一个触发器能够根据哪个表的更改来自动执行操作？
   A) 单个被引用的表
   B) 视图中的虚拟数据集
   C) 用户自定义函数中提及的任何表
   D) 执行更新、插入或删除操作的实际表

6. 在SQL Server中，用于创建触发器的关键字是：
   A) CREATE CONSTRAINT
   B) CREATE TRIGGER
   C) ALTER TABLE ADD TRIGGER
   D) STORED PROCEDURE

7. 当数据库表中的某一字段需要保证其值的唯一性，并且该字段不是主键的一部分时，应使用哪种约束？
   A) UNIQUE 约束
   B) PRIMARY KEY 约束
   C) FOREIGN KEY 约束
   D) CHECK 约束

8. 以下哪个语句可以用来删除一个已经存在的触发器？
   A) DELETE TRIGGER name ON table;
   B) DROP TRIGGER name;
   C) REMOVE TRIGGER name FROM table;
   D) DISCARD TRIGGER name;

9. 在创建触发器时，为了确保数据库操作在插入后不会执行错误的操作，应使用哪个时间点的触发器？
   A) BEFORE INSERT
   B) AFTER INSERT
   C) INSTEAD OF INSERT
   D) ON INSERT

10. 当需要保证员工表中每个部门至少有一名经理时，应该采用哪种类型的约束或触发机制来实现这一规则？
    A) FOREIGN KEY 约束
    B) CHECK 约束配合存储过程
    C) 规则（Rule）
    D) DEFAULT 定义

11. 哪种触发器会在数据插入之前执行，并允许更改插入的值以确保所有插入的数据都满足特定规则？
   A) AFTER INSERT
   B) INSTEAD OF INSERT
   C) BEFORE INSERT
   D) ON INSERT

12. 如果需要创建一个在删除某条记录时自动更新另一个表的触发器，应使用哪个关键字来指定时间点？
   A) BEFORE DELETE
   B) AFTER DELETE
   C) INSTEAD OF DELETE
   D) DELETE FROM TRIGGER

13. 下列哪种约束是用于保证外键字段只能引用主表中的现有值？
    A) FOREIGN KEY 约束
    B) PRIMARY KEY 约束
    C) UNIQUE 约束
    D) CHECK 约束

14. 当创建一个触发器时，如果希望在触发条件满足前先执行一些检查或操作，则应当使用哪种类型的触发？
   A) AFTER 触发器
   B) BEFORE 触发器
   C) INSTEAD OF 触发器
   D) 视图触发器

15. 若要创建一个只允许在特定列进行更新的视图，并且该视图上的数据修改需要通过触发器来执行，应当使用哪种类型的触发？
    A) AFTER UPDATE 触发器
    B) INSTEAD OF UPDATE 触发器
    C) BEFORE INSERT 触发器
    D) ON DELETE TRIGGER

### 参考答案：
1. D
2. D
3. B
4. C
5. D
6. B
7. A
8. B
9. C
10. B
11. C
12. B
13. A
14. B
15. B

2. 名词解释 (10分)
### 数据库系统考试——第七章 约束与触发器

#### 名词解释题（共5道）

1. 主键约束 (Primary Key Constraint)
2. 外键约束 (Foreign Key Constraint)
3. 触发器 (Trigger)
4. CHECK 约束 (CHECK Constraint)
5. NOT NULL 约束 (NOT NULL Constraint)

---

### 参考答案

1. **主键约束**：在关系数据库中，主键是一种唯一标识一个表中各行的属性或一组属性。它不仅确保了数据实体的唯一性，还支持建立有效的索引和外键引用。
2. **外键约束**：外键是定义在某个关系表中的字段，其值必须与另一特定关系表（称为父表）中的主键相匹配。这种机制用于实现数据库中不同表之间的参照完整性控制。
3. **触发器**：这是一种存储过程，在数据操作语言 (DML) 语句执行时被自动调用或激活。它可以基于特定事件发生，如在插入、更新或删除记录后自动执行预定义的SQL代码段。
4. **CHECK 约束**：该约束允许开发者指定一个表达式，用于限制可以输入表中的数据值范围。它确保用户仅能插入符合条件的数据行，从而提高数据的一致性和完整性。
5. **NOT NULL 约束**：此约束用于防止在指定的列中出现空值（NULL）。当该约束被应用时，任何试图在这些字段中存储无数据值的操作都将失败。

3. 简答题 (20分)
### 数据库系统考试简答题题库（第七章 约束与触发器）

**题目：**

1. 请解释什么是数据库中的主键约束，并说明其作用。
2. 在SQL中，创建一个外键约束时需要满足哪些条件？为什么？
3. 触发器是什么？在何种场景下使用触发器最为合适？
4. 假设有一个订单表（orders）和商品表（products），请设计一条语句来确保每个订单中的产品数量不会超过该产品的库存量。你需要用到什么类型的约束或触发器？

**参考答案：**

1. **主键约束解释及其作用**
   - 主键是一种用来唯一标识数据库中每一行数据的字段，不允许有重复值，并且不可以为空。
   - 作用包括：确保表中的记录具有唯一性；作为外键以建立表与表之间的关系。

2. **创建外键约束所需条件及原因分析**
   - 外键需要引用一个主键或另一个唯一索引；
   - 两个相关联的列必须有相同的数据类型；
   - 创建外键时，参照表中的数据应该已经存在。
   - 原因在于：确保关系数据库模型中数据的一致性和完整性；通过关联不同表之间的记录来提高数据检索效率。

3. **触发器定义及其应用场景**
   - 触发器是一组SQL语句的集合，在特定情况下（如插入、更新或删除操作）自动执行。
   - 使用场景包括：审计日志记录；复杂的数据验证；确保在数据库中实现业务规则逻辑等，特别是在需要对多个表进行修改时。

4. **使用触发器限制订单数量**
   ```sql
   CREATE TRIGGER prevent_overorder
   BEFORE INSERT ON orders FOR EACH ROW
   BEGIN
       DECLARE stock INT;
       SELECT inventory FROM products WHERE id = NEW.product_id INTO stock;
       IF stock < NEW.quantity THEN
           SIGNAL SQLSTATE '45000'
               SET MESSAGE_TEXT = 'Insufficient product stock';
       END IF;
   END
   ```
   - 解释：创建一个`BEFORE INSERT`触发器，在插入新的订单记录之前检查该产品在商品表中的库存量是否足够覆盖新订单的数量。如果不够，则阻止这次插入操作，并返回错误信息。

以上题目旨在考查学生对于约束与触发器概念的理解以及实际应用能力，确保答案能体现这些知识点之间的联系和具体应用场景。

4. 设计题 (30分)
### 数据库系统考试设计题（第七章 约束与触发器）

#### 1. 设计一个包含学生、课程和选课三个表的关系数据库模型，并为其设置适当的约束条件。
- 学生表：Student (Sno, Sname, Sage)
- 课程表：Course (Cno, Cname, Credit)
- 选课表：SC (Sno, Cno, Grade)

#### 2. 假设有一个产品表 Product (Pid, Pname, Price)，编写 SQL 语句以确保所有产品的价格不得低于10元。
  
#### 3. 设计一个订单系统，包含客户、订单和订单详情三个表。为保证每个订单都有至少一条相应的订单详情记录，请写出实现此功能的触发器。

#### 4. 在一个图书管理数据库中，有一个图书借阅表 Borrow (Bid, Bname, UserId, BorrowDate)，编写 SQL 语句来确保每本被借出的书在还回之前不会再次被借出。
  
#### 5. 设计一张员工表 Employee (Eid, Ename, Salary, DeptId) 和一个部门表 Department (DeptId, Dname)。使用适当的约束条件，保证每个员工隶属于且仅隶属于一个部门，并编写 SQL 语句来实现这种一对一的关系。

#### 6. 创建一个银行账户系统数据库模型（包含客户、账户和交易三个表），并为账户表 Account (Aid, Balance) 添加检查约束，确保所有账户的余额始终大于等于0元。
  
#### 7. 设计一个班级管理系统，包括学生和成绩两个表。使用触发器来保证当某个学生的总分发生变化时能够自动更新其年级排名。

#### 8. 在一个库存管理数据库中设计一张商品表 Product (Pid, Pname, Stock)，编写 SQL 触发器，在每次商品库存减少时记录该变化。
  
#### 9. 设计一个图书馆书籍借阅系统，包含读者、图书和借阅三个表。使用适当的约束条件来限制每本书的借阅数量，并确保一次只能有一个读者同时借阅同一本图书。

#### 10. 编写一条 SQL 语句，在删除产品表 Product (Pid, Pname, Price) 中的一行时，自动更新订单详情 OrderDetail 表中的相关记录以反映该产品的缺货状态。


### 参考答案

#### 1. 数据库设计和约束条件设置
- Student：(Sno primary key)
- Course：(Cno primary key)
- SC：(Sno, Cno composite primary key), (Sno references Student(Sno)), (Cno references Course(Cno))

#### 2. SQL语句添加检查约束以确保价格不小于10元
```sql
ALTER TABLE Product ADD CONSTRAINT Check_Price CHECK (Price >= 10);
```

#### 3. 创建订单详情的触发器
```sql
CREATE TRIGGER Ensure_Order_Detail
BEFORE INSERT ON Orders
FOR EACH ROW 
BEGIN
    IF NOT EXISTS (SELECT * FROM OrderDetail WHERE orderId = NEW.id) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Each order must have at least one detail.';
    END IF;
END;
```

#### 4. 防止重复借阅图书的SQL语句
```sql
CREATE TRIGGER Prevent_Duplicate_Borrow
BEFORE INSERT ON Borrow
FOR EACH ROW 
BEGIN
    IF EXISTS (SELECT * FROM Borrow WHERE Bid = NEW.Bid AND ReturnDate IS NULL) THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Book is already borrowed.';
    END IF;
END;
```

#### 5. 员工与部门关系的约束条件设置及SQL语句实现
- Employee：(Eid primary key, DeptId references Department(DeptId))
- Department：(DeptId primary key)

#### 6. 账户余额检查约束添加
```sql
ALTER TABLE Account ADD CONSTRAINT Check_Balance CHECK (Balance >= 0);
```

#### 7. 学生总分与年级排名的触发器设计
略（涉及复杂逻辑，包括临时存储学生分数及排序）

#### 8. 商品库存减少记录的触发器创建
```sql
CREATE TRIGGER Log_Stock_Reduction
AFTER UPDATE ON Product
FOR EACH ROW 
BEGIN
    IF NEW.Stock < OLD.Stock THEN
        INSERT INTO StockHistory (Pid, OldStock, NewStock)
        VALUES (NEW.Pid, OLD.Stock, NEW.Stock);
    END IF;
END;
```

#### 9. 图书借阅数量及同时性限制设计
略（涉及复杂的表连接与触发器逻辑）

#### 10. 删除产品时更新订单详情的状态变化记录
```sql
CREATE TRIGGER Update_Order_Detail_On_Delete
BEFORE DELETE ON Product
FOR EACH ROW 
BEGIN
    UPDATE OrderDetail SET Status = 'OutOfStock' WHERE ProdId = OLD.Pid;
END;
```

这些题目和答案旨在帮助学生理解和掌握关于关系数据库设计中约束与触发器的运用。

5. 综合题 (10分)
### 数据库系统考试综合题

#### 第一题：E-R 模型设计与关系模式转换（20分）

**背景信息：**

某高校为了管理学生选课记录和成绩，打算建立一个数据库。该数据库需要包含以下实体：

- 学生（Student）：每个学生有唯一的学号（Sno），姓名（Sname），性别（Sex），年龄（Age）。
- 课程（Course）：每门课程有一个唯一课程编号（Cno），名称（Cname），学分（Credit）。
- 成绩（Grade）：记录学生的选课成绩，包括学生学号、课程编号和成绩。

**设计要求：**

1. 根据上述背景信息，请用E-R图表示实体之间的关系，并明确每种联系的基数。
2. 将E-R模型转换为相应的三张关系模式，分别为Student（Sno为主键）、Course（Cno为主键）和Grade（Sno+Cno组合主键）。

**问题：**

1. 请画出该数据库系统的E-R图，并标明每个实体属性的名称及其类型。
2. 根据上述E-R模型设计的结果，将三个实体转换为关系模式。请写出对应的SQL语句创建Student、Course和Grade三张表，包括主键设置。

**参考答案：**

1. E-R 图：
   - 学生（Student）实体包含属性：Sno, Sname, Sex, Age。
   - 课程（Course）实体包含属性：Cno, Cname, Credit。
   - 成绩（Grade）实体包含属性：Sno (参照Student实体的主键), Cno (参照Course实体的主键)，Grade。
   
2. SQL语句：
   ```sql
   CREATE TABLE Student (
       Sno CHAR(10) PRIMARY KEY,
       Sname VARCHAR(50),
       Sex CHAR(6),
       Age INT
   );
   
   CREATE TABLE Course (
       Cno CHAR(10) PRIMARY KEY,
       Cname VARCHAR(100),
       Credit INT
   );
   
   CREATE TABLE Grade (
       Sno CHAR(10),
       Cno CHAR(10),
       Grade DECIMAL(4,2),
       PRIMARY KEY (Sno, Cno),
       FOREIGN KEY (Sno) REFERENCES Student(Sno),
       FOREIGN KEY (Cno) REFERENCES Course(Cno)
   );
   ```

#### 第二题：触发器设计与约束应用（30分）

**背景信息：**

继续使用上一题的高校选课数据库，为了保证数据的一致性和完整性，需要增加一些额外的功能：

1. 当学生提交成绩时，如果其填写的成绩低于60分，则系统应自动插入一条失败记录至一个单独的日志表Fails中。
2. 每学期结束时，所有超过两年未选课的学生应该被标记为“长期不活跃”，并在数据库中的专门字段中标记。

**问题：**

1. 请设计上述功能所需的关系模式变化，并写出相应的SQL语句创建Fails表及修改Student表。
2. 编写触发器（Trigger）代码以实现功能要求的自动插入失败记录的功能和学生状态标记功能。

**参考答案：**
  
1. SQL语句：
   ```sql
   CREATE TABLE Fails (
       Sno CHAR(10),
       Cno CHAR(10),
       Grade DECIMAL(4,2),
       FailDate DATE,
       PRIMARY KEY (Sno, Cno)
   );
   
   ALTER TABLE Student ADD COLUMN ActiveStatus VARCHAR(50) DEFAULT 'Active';
   ```
   
2. 触发器代码：
   - 插入失败记录的触发器
     ```sql
     CREATE TRIGGER InsertFailRecord BEFORE INSERT ON Grade FOR EACH ROW
     BEGIN
         IF NEW.Grade < 60 THEN
             INSERT INTO Fails (Sno, Cno, Grade, FailDate) VALUES(NEW.Sno, NEW.Cno, NEW.Grade, CURRENT_DATE);
         END IF;
     END ;
     ```
   - 标记长期不活跃学生的触发器（可以创建一个事件或者定期执行的存储过程来实现，这里仅提供一个简单的示例）
     ```sql
     DELIMITER //
     CREATE EVENT UpdateInactiveStudents
     ON SCHEDULE EVERY 1 DAY STARTS CURRENT_DATE + INTERVAL 1 DAY 
     DO 
         UPDATE Student SET ActiveStatus = 'Inactive' WHERE DATEDIFF(CURRENT_DATE, (SELECT MAX(TakeDate) FROM Grade WHERE Sno = Student.Sno)) > 730;
     //
     DELIMITER ;
     ```
   
以上就是根据给定章节范围设计的两道综合题及参考答案。
